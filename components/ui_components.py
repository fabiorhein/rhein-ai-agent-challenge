import streamlit as st
import pandas as pd
import time
import hashlib 

def build_sidebar(memory, user_id):
    """Constr√≥i a sidebar do aplicativo."""
    with st.sidebar:
        st.header("An√°lise EDA com IA")

        # Key √∫nica baseada no user_id para manter consist√™ncia
        unique_key = f"file_uploader_{user_id}"

        uploaded_file = st.file_uploader(
            "Fa√ßa o upload do seu arquivo CSV",
            type=["csv"],
            accept_multiple_files=False,
            key=unique_key
        )

        st.subheader("Hist√≥rico de Sess√µes")
        sessions = memory.get_user_sessions(user_id)
        if sessions:
            for session in sessions:
                st.info(
                    f"ID: ...{session['id'][-6:]}\nDataset: {session['dataset_name']}\nData: {pd.to_datetime(session['created_at']).strftime('%d/%m/%Y %H:%M')}")
        else:
            st.write("Nenhuma sess√£o anterior encontrada.")

        st.subheader("Configura√ß√µes")
        st.info("Configura√ß√µes futuras aqui.")

    return uploaded_file


def display_chat_message(role, content, chart_fig=None, key=None, generated_code=None):
    """Exibe uma mensagem no chat."""
    with st.chat_message(role):
        st.markdown(content)
        if chart_fig:
            # Gera uma chave √∫nica se n√£o foi fornecida
            if key is None:
                content_hash = hashlib.md5(f"{role}_{content}_{str(chart_fig)}".encode()).hexdigest()[:8]
                key = f"chart_{role}_{content_hash}"
            st.plotly_chart(chart_fig, use_container_width=True, key=key)

        # Sempre exibe o c√≥digo se estiver dispon√≠vel
        # O c√≥digo deve ser vis√≠vel junto com o gr√°fico ou resultado
        if generated_code and role == "assistant":
            execution_container, results_container = display_code_with_streamlit_suggestion(generated_code, auto_execute=False)
            # Retornar os containers para serem usados pelo app.py
            return execution_container, results_container

    return None, None


def display_code_with_streamlit_suggestion(code, auto_execute=True):
    """Exibe c√≥digo Python com op√ß√£o de execu√ß√£o na pr√≥pria interface."""
    st.code(code, language='python')

    if auto_execute:
        st.info("üí° **C√≥digo Gerado:** Este c√≥digo ser√° executado automaticamente na pr√≥pria interface!")

        # Expander para mostrar que o c√≥digo est√° sendo executado
        with st.expander("üîÑ Executando c√≥digo automaticamente...", expanded=True):
            st.markdown("**Status:** Executando c√≥digo Python gerado...")

            # Simular execu√ß√£o (iremos implementar a execu√ß√£o real no app.py)
            execution_container = st.empty()

            # Placeholder para resultados da execu√ß√£o
            st.markdown("**Resultados da Execu√ß√£o:**")
            results_container = st.empty()

            # Retornar os containers para serem atualizados pelo app.py
            return execution_container, results_container

    # Quando auto_execute=False, apenas exibe o c√≥digo sem containers
    return None, None